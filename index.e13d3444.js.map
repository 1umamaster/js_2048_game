{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.board = initialState || Array(4).fill().map(()=>Array(4).fill(0));\n        this.score = 0;\n        this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = Array(4).fill().map(()=>Array(4).fill(0));\n        this.score = 0;\n        this.status = 'playing';\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.start();\n    }\n    moveLeft() {\n        let moved = false;\n        this.board = this.board.map((row)=>{\n            const filtered = row.filter((v)=>v !== 0);\n            for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n                filtered[i] *= 2;\n                this.score += filtered[i];\n                filtered[i + 1] = 0;\n                moved = true;\n            }\n            const newRow = filtered.filter((v)=>v !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            if (!moved && row.toString() !== newRow.toString()) moved = true;\n            return newRow;\n        });\n        if (moved) this.addRandomTile();\n        this.checkGameState();\n    }\n    moveRight() {\n        this.board = this.board.map((row)=>row.reverse());\n        this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n    }\n    moveUp() {\n        this.transpose();\n        this.moveLeft();\n        this.transpose();\n    }\n    moveDown() {\n        this.transpose();\n        this.moveRight();\n        this.transpose();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        this.board.forEach((row, i)=>{\n            row.forEach((cell, j)=>{\n                if (cell === 0) emptyCells.push({\n                    i: i,\n                    j: j\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const { i: i, j: j } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    checkGameState() {\n        if (this.board.flat().includes(2048)) {\n            this.status = 'win';\n            return;\n        }\n        const movesAvailable = this.board.some((row, i)=>{\n            return row.some((cell, j)=>{\n                return cell === 0 || j < 3 && cell === this.board[i][j + 1] || i < 3 && cell === this.board[i + 1][j];\n            });\n        });\n        if (!movesAvailable) this.status = 'lose';\n    }\n    transpose() {\n        this.board = this.board[0].map((_, i)=>this.board.map((row)=>row[i]));\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll('.field-cell');\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.button.start');\nconst $09e991522ca7e64e$var$messages = {\n    start: document.querySelector('.message-start'),\n    win: document.querySelector('.message-win'),\n    lose: document.querySelector('.message-lose')\n};\nfunction $09e991522ca7e64e$var$updateUI() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$cells.forEach((cell, index)=>{\n        const x = Math.floor(index / 4);\n        const y = index % 4;\n        const value = board[x][y];\n        cell.className = 'field-cell';\n        if (value > 0) cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value || '';\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    Object.keys($09e991522ca7e64e$var$messages).forEach((key)=>{\n        $09e991522ca7e64e$var$messages[key].classList.add('hidden');\n    });\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') $09e991522ca7e64e$var$messages.start.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'win') $09e991522ca7e64e$var$messages.win.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'lose') $09e991522ca7e64e$var$messages.lose.classList.remove('hidden');\n    if ($09e991522ca7e64e$var$game.getStatus() === 'playing' || $09e991522ca7e64e$var$game.getStatus() === 'lose') $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n    else $09e991522ca7e64e$var$startButton.textContent = 'Start';\n    $09e991522ca7e64e$var$startButton.classList.add('restart');\n}\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateUI();\n});\ndocument.addEventListener('keydown', (ev)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') return;\n    switch(ev.key){\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=index.e13d3444.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messages = {\n  start: document.querySelector('.message-start'),\n  win: document.querySelector('.message-win'),\n  lose: document.querySelector('.message-lose'),\n};\n\nfunction updateUI() {\n  const board = game.getState();\n\n  cells.forEach((cell, index) => {\n    const x = Math.floor(index / 4);\n    const y = index % 4;\n    const value = board[x][y];\n\n    cell.className = 'field-cell';\n\n    if (value > 0) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n    cell.textContent = value || '';\n  });\n\n  scoreElement.textContent = game.getScore();\n\n  Object.keys(messages).forEach((key) => {\n    messages[key].classList.add('hidden');\n  });\n\n  if (game.getStatus() === 'idle') {\n    messages.start.classList.remove('hidden');\n  } else if (game.getStatus() === 'win') {\n    messages.win.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    messages.lose.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'playing' || game.getStatus() === 'lose') {\n    startButton.textContent = 'Restart';\n  } else {\n    startButton.textContent = 'Start';\n  }\n\n  startButton.classList.add('restart');\n}\n\nstartButton.addEventListener('click', () => {\n  game.restart();\n  updateUI();\n});\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (ev.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  updateUI();\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.board =\n      initialState ||\n      Array(4)\n        .fill()\n        .map(() => Array(4).fill(0));\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = Array(4)\n      .fill()\n      .map(() => Array(4).fill(0));\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    this.board = this.board.map((row) => {\n      const filtered = row.filter((v) => v !== 0);\n\n      for (let i = 0; i < filtered.length - 1; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          filtered[i] *= 2;\n          this.score += filtered[i];\n          filtered[i + 1] = 0;\n          moved = true;\n        }\n      }\n\n      const newRow = filtered.filter((v) => v !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      if (!moved && row.toString() !== newRow.toString()) {\n        moved = true;\n      }\n\n      return newRow;\n    });\n\n    if (moved) {\n      this.addRandomTile();\n    }\n    this.checkGameState();\n  }\n\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n    this.moveLeft();\n    this.board = this.board.map((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, i) => {\n      row.forEach((cell, j) => {\n        if (cell === 0) {\n          emptyCells.push({ i, j });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const { i, j } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  checkGameState() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n\n      return;\n    }\n\n    const movesAvailable = this.board.some((row, i) => {\n      return row.some((cell, j) => {\n        return (\n          cell === 0 ||\n          (j < 3 && cell === this.board[i][j + 1]) ||\n          (i < 3 && cell === this.board[i + 1][j])\n        );\n      });\n    });\n\n    if (!movesAvailable) {\n      this.status = 'lose';\n    }\n  }\n\n  transpose() {\n    this.board = this.board[0].map((_, i) => this.board.map((row) => row[i]));\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","Array","fill","map","score","status","getState","getScore","getStatus","start","addRandomTile","restart","moveLeft","moved","row","filtered","filter","v","i","length","newRow","push","toString","checkGameState","moveRight","reverse","moveUp","transpose","moveDown","emptyCells","forEach","cell","j","Math","floor","random","flat","includes","some","_","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$scoreElement","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messages","win","lose","$09e991522ca7e64e$var$updateUI","index","value","className","classList","add","textContent","Object","keys","key","remove","addEventListener","ev"],"version":3,"file":"index.e13d3444.js.map"}